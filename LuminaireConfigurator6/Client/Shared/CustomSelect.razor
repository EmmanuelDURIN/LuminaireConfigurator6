@typeparam TItem
@typeparam TValue
@typeparam TDisplay

<select class="form-control" @bind="@SelectedValue">
    @if (ChildContent != null)
    {
        @ChildContent
    }
    @foreach (TItem item in Items)
    {
        bool isSelected = item?.Equals(Selected) ?? false;
        <option value="@ValueSelector(item)" selected="@isSelected">@DisplaySelector(item)</option>
    }
</select>

@code {
    [Parameter]
    public TItem? Selected { get; set; }
    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public Func<TItem, TValue>? ValueSelector { get; set; }
    [Parameter]
    public Func<TItem, TDisplay>? DisplaySelector { get; set; }

    private Task OnSelectedChanged(ChangeEventArgs e)
    {
        Selected = Items.FirstOrDefault(i => ValueSelector != null && ValueSelector(i)?.ToString()?.Equals(e.Value?.ToString()) == true);
        return SelectedChanged.InvokeAsync(Selected);
    }
    [Parameter]
    public EventCallback<TItem> SelectedChanged { get; set; }

    private TValue? selectedValue { get; set; }
    public TValue? SelectedValue
    {
        get => selectedValue;
        set
        {
            selectedValue = value;
            Selected = Items.FirstOrDefault(i => ValueSelector != null && ValueSelector(i)?.ToString()?.Equals(value?.ToString()) == true);
            SelectedChanged.InvokeAsync(Selected);
        }
    }
}

